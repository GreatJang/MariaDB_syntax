Redis (Remote Dictionary Server) 개요 - 인메모리 데이터 베이스

- 고성능의 키-값(key-value) 저장소로, 거대 맵(Map)데이터 저장소 형태를 가지고
    데이터를 메모리에 저장**하여 빠른 읽기와 쓰기를 지원(sql 쿼리 사용 불필요)
    
- (key-value)맵 데이터 저장소 형태이기 때문에 매우 빠르다. (위치 확인이 매우 빠름)
    - 기본적으로 해시함수를 사용한다. + 해시 테이블 사용
    - 키를 생성하면 생성 직후 해시값과 그 키에 대한 물리적인 주소를 매핑시켜놓는다.

- redis 문법
    - list : 순서가 있다, 중복이 가능
    - set : 순서가 없고, 중복이 없다. ⇒ 집합개념
    - zset : 순서를 어떤 기준으로 보장하고 싶을 때
    - get 키명 : value를 가져옴
    - del 키명 : value를 삭제함

- 주로 캐싱, 세션관리, DB 동시성 제어 등에서 다양한 목적으로 사용
    - 세션 (로그인 인증값)
        - 난수값을 저장해놓고 해당 난수값이 있는지 없는지 확인하여 사용가능
        - 세션관리 이유 : 굉장이 빈번하게 조회가 되기 때문에 빠르게 처리할 수 있는 redis에 올려둠
    - DB 동시성 제어
        - RDBMS에서 동시성 제어로 A가 select문으로 조회 중일 때  B는 A로인해 락이 걸려서 조회를 못하여 속도가 느려지는 상황에서 redis를 활용하면 성능이 좀 빨라진다.
        
- 싱글 스레드 구조로 동시성 이슈 발생 X
    - redis는 비동기적으로 동작하다보니까 싱글스레드여도 빠르게 처리 가능하다.
    - 동기 : 사용자의 request부터 → spring의 thread 1개 할당 → db 조회 → 사용자의 요청에 맞는 데이터 조립 → response
    - 비동기 : 작업을 thread가 할당처리 → 모두 다 완료될 때까지 기다리지 않는다. → 작업의 처리를 위임하고, 다른 사용자의 요청을 받으러 갑니다.
        (처리결과를 기다리지 않고 다음 처리를 위해 움직이기 때문에 동기적 방법보다 비동기가 더 빠르다.)